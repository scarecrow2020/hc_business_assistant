import axios from 'axios'

let config = {
  baseURL: '/api',
  // timeout: 60 * 1000, // Timeout
  // withCredentials: true, // Check cross-site Access-Control
  transformRequest: [(data: any) => {
    if (data) {
      let ret = ''
      for (let [key, value] of Object.entries(data)) {
        if (value) {
          ret += encodeURIComponent(key) + '=' + encodeURIComponent(JSON.stringify(value)) + '&'
        }
      }
      return ret.endsWith('&') ? ret.substring(0, ret.length - 1) : ret
    }
  }]
}

const _axios = axios.create(config)
_axios.interceptors.request.use((config: any) => {
  // Do something before request is sent
  if (['get', 'delete'].includes(config.method)) {
    let [url, params] = [config.url, config.params]
    if (params) {
      url += url.indexOf('?') < 0 ? '?' : '&'
      for (let [key, value] of Object.entries(params)) {
        if (value) {
          if (value instanceof Array || value instanceof Object) {
            value = JSON.stringify(value)
          }
          url += `${key}=${value}&`
        }
      }
      if (url.endsWith('&')) url = url.substring(0, url.length - 1)
    }
    config.url = encodeURI(url)
    config.params = null
  }
  return config
}, error => {
  // Do something with request error
  return Promise.reject(error)
})

// Add a response interceptor
_axios.interceptors.response.use(response => {
  // Do something with response data
  return response.data
}, error => {
  // console.log(error)
  // Do something with response error
  return Promise.reject(error)
})

export default _axios
import axios from 'axios'
import router from '../router'
import snackbar from './snackbar'

let config = {
  baseURL: '/fae',
  // timeout: 60 * 1000, // Timeout
  // headers: { // 设置默认请求头
  //   'X-Requested-With': 'XMLHttpRequest', // 为ajax异步请求
  //   'Content-Type': 'application/x-www-form-urlencoded'
  // },
  // withCredentials: true, // Check cross-site Access-Control
  transformRequest: [(data: any) => {
    if (data) {
      let ret = ''
      for (let [key, value] of Object.entries(data)) {
        if (value !== null && value != undefined) {
          let newVal: string
          if (value instanceof Array || value instanceof Object) {
            newVal = JSON.stringify(value)
          } else {
            newVal = value
          }
          ret += `${encodeURIComponent(key)}=${encodeURIComponent(newVal)}&`
        }
      }
      return paramsHandler(ret)
    }
  }]
}

const paramsHandler = (url: string) => {
  return url.endsWith('&') ? url.substring(0, url.length - 1) : url
}

const _axios = axios.create(config)
// 如果需要用get方式传递数组或对象，需要如下配置，如果是基本的number/string/boolean不需要配置
_axios.interceptors.request.use((config: any) => {
  if (['get', 'delete'].includes(config.method)) {
    let { url, params } = config
    if (params && Object.getOwnPropertyNames(params).length > 0) {
      url += url.indexOf('?') < 0 ? '?' : '&'
      for (let [key, value] of Object.entries(params)) {
        //如果java自定义参数解析可以接收数组，这里则和Object的处理一样，否则传字符串后台分割
        if (value !== null && value != undefined) {
          if (value instanceof Array) {
            value = value.join() 
          } else if (value instanceof Object) {
            value = JSON.stringify(value)
          }
          url += `${key}=${value}&`
        }
      }
    }
    config.url = encodeURI(paramsHandler(url))
    config.params = null
  }
  return config
}, error => {
  return Promise.reject(error)
})

// Add a response interceptor
_axios.interceptors.response.use(response => {
  // Do something with response data
  const data = response.data
  if (data.isLogin === false) {
    router.push({ name: 'Login' })
  }
  // console.log(response)
  return data
}, error => {
  snackbar('error', '请求失败,请稍后再试!')
  // console.log(error)
  // Do something with response error
  return Promise.reject(error)
})

export default _axios
